[{"C:\\posi_talk\\src\\reportWebVitals.js":"1","C:\\posi_talk\\src\\App.js":"2","C:\\posi_talk\\src\\index.js":"3"},{"size":362,"mtime":1612042869829,"results":"4","hashOfConfig":"5"},{"size":7974,"mtime":1612108395293,"results":"6","hashOfConfig":"5"},{"size":500,"mtime":1612048379195,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"bhdm9b",{"filePath":"10","messages":"11","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\posi_talk\\src\\reportWebVitals.js",[],"C:\\posi_talk\\src\\App.js",["15","16","17","18","19"],"import React, { useRef, useState, useEffect, useMemo } from 'react';\nimport './App.css';\nimport brain from './brain.png';\n\nimport firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nimport 'firebase/analytics';\n\nimport { useAuthState } from 'react-firebase-hooks/auth';\nimport { useCollectionData } from 'react-firebase-hooks/firestore';\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyBU0cP1JmSTQojHYHEIhLcFPzpFnTvFpTA\",\n  authDomain: \"positalk-53aa3.firebaseapp.com\",\n  projectId: \"positalk-53aa3\",\n  storageBucket: \"positalk-53aa3.appspot.com\",\n  messagingSenderId: \"196850086185\",\n  appId: \"1:196850086185:web:10062b2950d2dac7898738\",\n  measurementId: \"G-V68H4RTGD2\"\n})\n\nconst auth = firebase.auth();\nconst firestore = firebase.firestore();\nconst analytics = firebase.analytics();\n\n\nfunction App() {\n\n  const [user] = useAuthState(auth);\n  const [userDoc, changeUserDoc] = useState(); //profile infor\n\n  // everytime user state changes\n  useEffect(async () => {\n    // if the user object doesn't exist (aka not logged in) do nothing\n    if (!user)\n      return;\n\n    console.log(user);\n    const unsubscribe = firestore.collection(\"Users\").doc(user.uid).onSnapshot(doc => {\n      console.log(\"hello\");\n\n      console.log(doc);\n      changeUserDoc(\n        doc.data()\n      );\n    });\n    return () => unsubscribe();\n  }, [user]);\n  \n  useEffect(() => {\n    console.log(\"user profile\", userDoc);\n  }, [userDoc]);\n\n  let screenToShow = \"SignIn\";\n\n  if (user && userDoc) {\n    screenToShow = \"ReadyToChat\";\n  } else if (!userDoc && user) {\n    screenToShow = \"EditProfile\";\n  }\n\n  /*\n  return (\n    <div className = \"App\">\n      <header>\n        <h1>positalk</h1> \n        <SignOut />\n      </header>\n      <section>\n        {user ? <ChatRoom /> : <SignIn />}\n      </section>\n    </div>\n  )\n  }*/\n\n  return (\n    <div className=\"App\">\n      <header>\n      <div className=\"top\">\n      <img src={brain} alt=\"brain\"/>\n\n        <div>PosiTalk</div>\n      </div>\n      </header>\n\n      <section>\n        {screenToShow === \"SignIn\" ? (\n          <SignIn />\n          ): null}\n        {screenToShow === \"EditProfile\" ? (\n          <EditProfile profile={userDoc} uid={user.uid}/>\n          ): null}\n        {screenToShow === \"ReadyToChat\" ? (\n          <CreateChat/>\n          ): null}\n      </section>\n\n    </div>\n  )\n}\n\nfunction CreateChat() {\n  const [clickedStart, changeClickedStart] = useState(false);\n  const [topicPreference, changeTopicPreference] = useState();\n  const [roomTypePreference, changeRoomTypePreference] = useState();\n  return (\n    <div className = \"App\">\n      \n      {!clickedStart && (\n        <button className=\"startchatting\" onClick={() => changeClickedStart(true)}>Start Chatting</button>\n      )}\n      {clickedStart && !topicPreference && (\n        <>\n          <button className=\"moodbtn\" onClick={() => changeTopicPreference(\"Bad Day\")}>Bad Day</button>\n          <button className=\"moodbtn\" onClick={() => changeTopicPreference(\"Need a friend\")}>Need a friend</button>\n          <button className=\"moodbtn\" onClick={() => changeTopicPreference(\"Stressed\")}>Stressed</button>\n          <button className=\"moodbtn\" onClick={() => changeTopicPreference(\"Chilled Vibes\")}>Chilled Vibes</button>\n          <button className=\"moodbtn\" onClick={() => changeTopicPreference(\"Positive\")}>Positive</button>\n          <button className=\"moodbtn\" onClick={() => changeTopicPreference(\"Best day ever\")}>Best day ever</button>\n        </>\n      )}\n      {clickedStart && topicPreference && !roomTypePreference && (\n        <>\n          <button onClick={() => changeRoomTypePreference(\"One-on-one\")}>One-on-one</button>\n          <button onClick={() => changeRoomTypePreference(\"Group\")}>Group</button>\n        </>\n      )}\n      {clickedStart && topicPreference && roomTypePreference && (\n        <h1>The next screen goes here</h1>\n        //<h1>positalk</h1>\n      )}\n      <SignOut />\n    </div>\n  )\n}\n\n\nfunction EditProfile({ profile={}, uid}) {\n  const [name, changeName] = useState(profile.fullName || \"\");\n  const [bio, changeBio] = useState(profile.Bio || \"\");\n  const [age, changeAge] = useState(profile.Age || \"\");\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    firestore.collection(\"Users\").doc(uid).set({ fullName: name, Bio: bio, Age: age })\n  }\n  return (\n    <>\n    <p>Create your profile</p>\n      <form onSubmit = {handleSubmit}>\n        <div className=\"editbox\">\n          <div className=\"labelName\">\n            <label>Name: </label>\n            <input type=\"textName\" placeholder=\"Name \" value={name} onChange={e => changeName(e.target.value)}></input>\n          </div>\n\n          <div className=\"labelAge\">\n            <label>Age: </label>\n            <input type=\"text\" placeholder=\"Age \" value={age} onChange={e => changeAge(e.target.value)}></input>\n          </div>\n\n          <div className=\"labelBio\">\n            <label>Bio: </label>\n            <input type=\"text\" placeholder=\"Bio \" value={bio} onChange={e => changeBio(e.target.value)}></input>\n          </div>\n\n          <div className=\"buttonedit\">\n        <button className=\"createprofile\" type=\"submit\" >Create Profile</button>\n        <SignOut />\n        </div>  \n        </div>\n      </form>\n\n      <div> .</div>\n    </>\n  )\n}\n\nfunction SignIn() {\n\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  }\n\n\n  return (\n    <>\n    <p>A safe haven to chat about your mental health with others</p>\n    <div className=\"rowContainer\">\n      <div className=\"box\">\n        <div className=\"circle\">\n        <div className=\"number\">1</div>\n        </div>\n        <div className=\"partext\">Sign in and create a profile to start chatting!</div>\n      </div>\n\n      <div className=\"box\">\n      <div className=\"circle\">\n        <div className=\"number\">2</div>\n        </div>\n        <div className=\"partext\">Chat with a Posi-Partner or with a group based on your mood!</div>\n      </div>\n\n      <div className=\"box\">\n      <div className=\"circle\">\n        <div className=\"number\">3</div>\n        </div> \n        <div className=\"partext\">Give your Posi-Partner(s) a rating!</div>\n      </div>\n\n    </div>\n      <div className=\"signInSpan\">\n      <button className=\"signin\" onClick={signInWithGoogle}>Sign in with Google</button>\n      </div>\n    </>\n  )\n\n}\n\nfunction SignOut() {\n  return auth.currentUser && (\n    <button className=\"sign-out\" onClick={() => auth.signOut()}>Sign Out</button>\n  )\n}\n\n\nfunction ChatRoom() { //what if we put in the chat titles as parameters in this function\n  const dummy = useRef();\n  const messagesRef = firestore.collection('messages');\n  const query = messagesRef.orderBy('createdAt').limit(25);\n\n  const [messages] = useCollectionData(query, { idField: 'id' });\n\n  const [formValue, setFormValue] = useState('');\n\n\n  const sendMessage = async (e) => {\n    e.preventDefault();\n\n    const { uid, photoURL } = auth.currentUser;\n\n    await messagesRef.add({\n      text: formValue,\n      createdAt: firebase.firestore.FieldValue.serverTimestamp(),\n      uid,\n      photoURL\n    })\n\n    setFormValue('');\n    dummy.current.scrollIntoView({ behavior: 'smooth' });\n  }\n\n  return (\n  <>\n    <main>\n\n      {messages && messages.map(msg => <ChatMessage key={msg.id} message={msg} />)}\n\n      <span ref={dummy}></span>\n\n    </main>\n\n    <form onSubmit={sendMessage}>\n\n      <input value={formValue} onChange={(e) => setFormValue(e.target.value)} placeholder=\"say something nice\" />\n\n      <button type=\"submit\" disabled={!formValue}>üïäÔ∏è</button>\n\n    </form>\n  </>\n  )\n}\n\n\nfunction ChatMessage(props) {\n  const { text, uid, photoURL } = props.message;\n\n  const messageClass = uid === auth.currentUser.uid ? 'sent' : 'received';\n\n  return (\n  <>\n    <div className={`message ${messageClass}`}>\n      <img src={photoURL || 'https://api.adorable.io/avatars/23/abott@adorable.png'} />\n      <p>{text}</p>\n    </div>\n  </>\n  )\n}\n\n\nexport default App;","C:\\posi_talk\\src\\index.js",[],{"ruleId":"20","severity":1,"message":"21","line":1,"column":46,"nodeType":"22","messageId":"23","endLine":1,"endColumn":53},{"ruleId":"20","severity":1,"message":"24","line":25,"column":7,"nodeType":"22","messageId":"23","endLine":25,"endColumn":16},{"ruleId":"25","severity":1,"message":"26","line":34,"column":13,"nodeType":"27","endLine":49,"endColumn":4},{"ruleId":"20","severity":1,"message":"28","line":229,"column":10,"nodeType":"22","messageId":"23","endLine":229,"endColumn":18},{"ruleId":"29","severity":1,"message":"30","line":285,"column":7,"nodeType":"31","endLine":285,"endColumn":88},"no-unused-vars","'useMemo' is defined but never used.","Identifier","unusedVar","'analytics' is assigned a value but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","'ChatRoom' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]